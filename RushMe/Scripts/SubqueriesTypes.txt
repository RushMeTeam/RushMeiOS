#/**
#* Copyright IBM Corporation 2016, 2017
#*
#* Licensed under the Apache License, Version 2.0 (the "License");
#* you may not use this file except in compliance with the License.
#* You may obtain a copy of the License at
#*
#* http://www.apache.org/licenses/LICENSE-2.0
#*
#* Unless required by applicable law or agreed to in writing, software
#* distributed under the License is distributed on an "AS IS" BASIS,
#* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#* See the License for the specific language governing permissions and
#* limitations under the License.
#**/

# An input file for subqueries.sh that generates global operators with subqueries (i.e. 'expression operator ANY/ALL(subquery)').
# This file contains the list of all the types for the operators: (the result type (Filter or Having), LHS, RHS (the subquery type)).
# The generated code is in Sources/SwiftKuery/Subqueries_GlobalFunctionsAndExtensions.swift.

# This is also an input file for testSubqueries.sh that generates the tests for the code created by subqueries.sh.
# The first three entries in each line are ignored. The format of the rest of the line is
# (where/having, first operand in Swift, second operand in Swift, first operand in SQL, second operand in SQL).
# The generated tests are in TestSubqueries.swift

# The operators are in SimpleOperators.txt

Filter ScalarColumnExpression Predicate<Filter,ScalarColumnExpression> where ucase(t.a) any(Select(t2.c,_from:_t2)) UCASE(table.a) ANY_(SELECT_table2.c_FROM_table2)
Filter String Predicate<Filter,ScalarColumnExpression> where "peach" all(Select(t2.c,_from:_t2)) 'peach' ALL_(SELECT_table2.c_FROM_table2)
Filter Column Predicate<Filter,ScalarColumnExpression> where t.a any(Select(t2.c,_from:_t2)) table.a ANY_(SELECT_table2.c_FROM_table2)
Filter Int Predicate<Filter,ScalarColumnExpression> where 3 any(Select(t2.c,_from:_t2)) 3 ANY_(SELECT_table2.c_FROM_table2)
Filter Float Predicate<Filter,ScalarColumnExpression> where Float(3.5) any(Select(t2.c,_from:_t2)) 3.5 ANY_(SELECT_table2.c_FROM_table2)
Filter Double Predicate<Filter,ScalarColumnExpression> where -8.1 any(Select(t2.c,_from:_t2)) -8.1 ANY_(SELECT_table2.c_FROM_table2)
Filter Parameter Predicate<Filter,ScalarColumnExpression> where Parameter("fruit") any(Select(t2.c,_from:_t2)) @fruit ANY_(SELECT_table2.c_FROM_table2)
Filter Bool Predicate<Filter,ScalarColumnExpression> where true all(Select(t2.c,_from:_t2)) true ALL_(SELECT_table2.c_FROM_table2)
Having AggregateColumnExpression Predicate<Having,AggregateColumnExpression> having sum(t.a) any(Select(t2.c,_from:_t2)) SUM(table.a) ANY_(SELECT_table2.c_FROM_table2)
Having String Predicate<Having,AggregateColumnExpression> having  "peach" all(Select(t2.c,_from:_t2)) 'peach' ALL_(SELECT_table2.c_FROM_table2)
Having Column Predicate<Having,AggregateColumnExpression> having t.a any(Select(t2.c,_from:_t2)) table.a ANY_(SELECT_table2.c_FROM_table2)
Having Int Predicate<Having,AggregateColumnExpression> having 3 any(Select(t2.c,_from:_t2)) 3 ANY_(SELECT_table2.c_FROM_table2)
Having Float Predicate<Having,AggregateColumnExpression> having Float(3.5) any(Select(t2.c,_from:_t2)) 3.5 ANY_(SELECT_table2.c_FROM_table2)
Having Double Predicate<Having,AggregateColumnExpression> having  -8.1 any(Select(t2.c,_from:_t2)) -8.1 ANY_(SELECT_table2.c_FROM_table2)
Having Parameter Predicate<Having,AggregateColumnExpression> having Parameter() any(Select(t2.c,_from:_t2)) \?1 ANY_(SELECT_table2.c_FROM_table2)
Having Bool Predicate<Having,AggregateColumnExpression> having true all(Select(t2.c,_from:_t2)) true ALL_(SELECT_table2.c_FROM_table2)
