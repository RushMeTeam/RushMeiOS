/**
* Copyright IBM Corporation 2016
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

import XCTest

@testable import SwiftKuery

// This test was generated by Scripts/testAggregate.sh.
class TestAggregateFunctions: XCTestCase {

    static var allTests: [(String, (TestAggregateFunctions) -> () throws -> Void)] {
        return [
            ("testFunctions", testFunctions),
        ]
    }

    class MyTable: Table {
        let a = Column("a")
        let b = Column("b")

        let tableName = "table"
    }

    func testFunctions() {
        let t = MyTable()
        let connection = createConnection()
        var s = Select(from: t)
        var kuery = ""
        var query = ""


        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(avg(t.b) > 3)
        kuery = connection.descriptionOf(query: s)
        query = "SELECT table.a FROM table GROUP BY table.a HAVING AVG(table.b) > 3"
        XCTAssertEqual(kuery, query, "\nError in query construction: \n\(kuery) \ninstead of \n\(query)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(max(t.b) > 3)
        kuery = connection.descriptionOf(query: s)
        query = "SELECT table.a FROM table GROUP BY table.a HAVING MAX(table.b) > 3"
        XCTAssertEqual(kuery, query, "\nError in query construction: \n\(kuery) \ninstead of \n\(query)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(min(t.b) > 3)
        kuery = connection.descriptionOf(query: s)
        query = "SELECT table.a FROM table GROUP BY table.a HAVING MIN(table.b) > 3"
        XCTAssertEqual(kuery, query, "\nError in query construction: \n\(kuery) \ninstead of \n\(query)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(sum(t.b) > 3)
        kuery = connection.descriptionOf(query: s)
        query = "SELECT table.a FROM table GROUP BY table.a HAVING SUM(table.b) > 3"
        XCTAssertEqual(kuery, query, "\nError in query construction: \n\(kuery) \ninstead of \n\(query)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(last(t.b) > 3)
        kuery = connection.descriptionOf(query: s)
        query = "SELECT table.a FROM table GROUP BY table.a HAVING LAST(table.b) > 3"
        XCTAssertEqual(kuery, query, "\nError in query construction: \n\(kuery) \ninstead of \n\(query)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(first(t.b) > 3)
        kuery = connection.descriptionOf(query: s)
        query = "SELECT table.a FROM table GROUP BY table.a HAVING FIRST(table.b) > 3"
        XCTAssertEqual(kuery, query, "\nError in query construction: \n\(kuery) \ninstead of \n\(query)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(count(t.b) > 3)
        kuery = connection.descriptionOf(query: s)
        query = "SELECT table.a FROM table GROUP BY table.a HAVING COUNT(table.b) > 3"
        XCTAssertEqual(kuery, query, "\nError in query construction: \n\(kuery) \ninstead of \n\(query)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(countDistinct(t.b) != 0)
        kuery = connection.descriptionOf(query: s)
        query = "SELECT table.a FROM table GROUP BY table.a HAVING COUNT(DISTINCT(table.b)) <> 0"
        XCTAssertEqual(kuery, query, "\nError in query construction: \n\(kuery) \ninstead of \n\(query)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(ucase(sum(t.b)) <= -1)
        kuery = connection.descriptionOf(query: s)
        query = "SELECT table.a FROM table GROUP BY table.a HAVING UCASE(SUM(table.b)) <= -1"
        XCTAssertEqual(kuery, query, "\nError in query construction: \n\(kuery) \ninstead of \n\(query)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(lcase(sum(t.b)) <= -1)
        kuery = connection.descriptionOf(query: s)
        query = "SELECT table.a FROM table GROUP BY table.a HAVING LCASE(SUM(table.b)) <= -1"
        XCTAssertEqual(kuery, query, "\nError in query construction: \n\(kuery) \ninstead of \n\(query)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(len(sum(t.b)) <= -1)
        kuery = connection.descriptionOf(query: s)
        query = "SELECT table.a FROM table GROUP BY table.a HAVING LEN(SUM(table.b)) <= -1"
        XCTAssertEqual(kuery, query, "\nError in query construction: \n\(kuery) \ninstead of \n\(query)")
        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(round(sum(t.b), to: 2) >= 9.08)
        kuery = connection.descriptionOf(query: s)
        query = "SELECT table.a FROM table GROUP BY table.a HAVING ROUND(SUM(table.b), 2) >= 9.08"
        XCTAssertEqual(kuery, query, "\nError in query construction: \n\(kuery) \ninstead of \n\(query)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(mid(sum(t.b), start: 3, length: 6) <= -1)
        kuery = connection.descriptionOf(query: s)
        query = "SELECT table.a FROM table GROUP BY table.a HAVING MID(SUM(table.b), 3, 6) <= -1"
        XCTAssertEqual(kuery, query, "\nError in query construction: \n\(kuery) \ninstead of \n\(query)")
  }
}
