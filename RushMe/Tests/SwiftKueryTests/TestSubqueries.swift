/**
* Copyright IBM Corporation 2016, 2017
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

import Foundation

import XCTest

@testable import SwiftKuery

// This test was generated by Scripts/testSubqueries.sh.
class TestSubqueries: XCTestCase {

    static var allTests: [(String, (TestSubqueries) -> () throws -> Void)] {
        return [
            ("testSubqueries", testSubqueries),
        ]
    }

    class MyTable: Table {
        let a = Column("a")
        let b = Column("b")

        let tableName = "table"
    }

    class MyTable2: Table {
        let c = Column("c")
        let tableName = "table2"
    }

    func testSubqueries() {
        let t = MyTable()
        let t2 = MyTable2()
        let connection = createConnection()
        var s = Select(from: t)
        var kuery = ""
        var queryWhere = ""
        var queryHaving = ""


        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a) == any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) = ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) = ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where("peach" == all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 'peach' = ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 'peach' = ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a == any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a = ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a = ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(3 == any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 3 = ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 3 = ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(Float(3.5) == any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 3.5 = ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 3.5 = ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(-8.1 == any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE -8.1 = ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE -8.1 = ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(Parameter("fruit") == any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE @fruit = ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE @fruit = ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(true == all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE true = ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE true = ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(sum(t.a) == any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING SUM(table.a) = ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING SUM(table.a) = ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having("peach" == all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 'peach' = ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 'peach' = ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a == any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a = ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a = ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(3 == any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 3 = ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 3 = ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(Float(3.5) == any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 3.5 = ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 3.5 = ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(-8.1 == any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING -8.1 = ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING -8.1 = ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(Parameter() == any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING ?1 = ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING ?1 = ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(true == all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING true = ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING true = ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a) >= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) >= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) >= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where("peach" >= all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 'peach' >= ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 'peach' >= ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a >= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a >= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a >= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(3 >= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 3 >= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 3 >= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(Float(3.5) >= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 3.5 >= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 3.5 >= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(-8.1 >= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE -8.1 >= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE -8.1 >= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(Parameter("fruit") >= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE @fruit >= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE @fruit >= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(true >= all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE true >= ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE true >= ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(sum(t.a) >= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING SUM(table.a) >= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING SUM(table.a) >= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having("peach" >= all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 'peach' >= ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 'peach' >= ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a >= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a >= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a >= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(3 >= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 3 >= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 3 >= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(Float(3.5) >= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 3.5 >= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 3.5 >= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(-8.1 >= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING -8.1 >= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING -8.1 >= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(Parameter() >= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING ?1 >= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING ?1 >= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(true >= all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING true >= ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING true >= ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a) > any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) > ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) > ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where("peach" > all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 'peach' > ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 'peach' > ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a > any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a > ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a > ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(3 > any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 3 > ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 3 > ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(Float(3.5) > any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 3.5 > ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 3.5 > ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(-8.1 > any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE -8.1 > ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE -8.1 > ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(Parameter("fruit") > any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE @fruit > ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE @fruit > ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(true > all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE true > ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE true > ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(sum(t.a) > any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING SUM(table.a) > ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING SUM(table.a) > ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having("peach" > all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 'peach' > ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 'peach' > ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a > any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a > ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a > ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(3 > any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 3 > ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 3 > ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(Float(3.5) > any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 3.5 > ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 3.5 > ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(-8.1 > any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING -8.1 > ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING -8.1 > ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(Parameter() > any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING ?1 > ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING ?1 > ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(true > all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING true > ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING true > ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a) <= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) <= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) <= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where("peach" <= all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 'peach' <= ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 'peach' <= ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a <= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a <= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a <= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(3 <= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 3 <= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 3 <= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(Float(3.5) <= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 3.5 <= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 3.5 <= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(-8.1 <= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE -8.1 <= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE -8.1 <= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(Parameter("fruit") <= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE @fruit <= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE @fruit <= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(true <= all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE true <= ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE true <= ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(sum(t.a) <= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING SUM(table.a) <= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING SUM(table.a) <= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having("peach" <= all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 'peach' <= ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 'peach' <= ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a <= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a <= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a <= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(3 <= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 3 <= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 3 <= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(Float(3.5) <= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 3.5 <= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 3.5 <= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(-8.1 <= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING -8.1 <= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING -8.1 <= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(Parameter() <= any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING ?1 <= ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING ?1 <= ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(true <= all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING true <= ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING true <= ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a) < any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) < ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) < ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where("peach" < all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 'peach' < ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 'peach' < ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a < any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a < ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a < ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(3 < any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 3 < ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 3 < ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(Float(3.5) < any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 3.5 < ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 3.5 < ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(-8.1 < any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE -8.1 < ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE -8.1 < ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(Parameter("fruit") < any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE @fruit < ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE @fruit < ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(true < all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE true < ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE true < ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(sum(t.a) < any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING SUM(table.a) < ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING SUM(table.a) < ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having("peach" < all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 'peach' < ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 'peach' < ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a < any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a < ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a < ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(3 < any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 3 < ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 3 < ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(Float(3.5) < any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 3.5 < ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 3.5 < ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(-8.1 < any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING -8.1 < ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING -8.1 < ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(Parameter() < any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING ?1 < ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING ?1 < ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(true < all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING true < ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING true < ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(ucase(t.a) != any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE UCASE(table.a) <> ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE UCASE(table.a) <> ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where("peach" != all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 'peach' <> ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 'peach' <> ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(t.a != any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE table.a <> ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a <> ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(3 != any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 3 <> ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 3 <> ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(Float(3.5) != any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE 3.5 <> ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 3.5 <> ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(-8.1 != any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE -8.1 <> ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE -8.1 <> ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(Parameter("fruit") != any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE @fruit <> ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE @fruit <> ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .where(true != all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table WHERE true <> ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE true <> ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(sum(t.a) != any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING SUM(table.a) <> ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING SUM(table.a) <> ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having("peach" != all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 'peach' <> ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 'peach' <> ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(t.a != any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING table.a <> ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a <> ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(3 != any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 3 <> ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 3 <> ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(Float(3.5) != any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING 3.5 <> ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 3.5 <> ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(-8.1 != any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING -8.1 <> ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING -8.1 <> ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(Parameter() != any(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING ?1 <> ANY (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING ?1 <> ANY (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

        s = Select(t.a, from: t)
            .group(by: t.a)
            .having(true != all(Select(t2.c, from: t2)))
        kuery = connection.descriptionOf(query: s)
        queryWhere = "SELECT table.a FROM table HAVING true <> ALL (SELECT table2.c FROM table2) GROUP BY table.a"
        queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING true <> ALL (SELECT table2.c FROM table2)"
        XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where(lcase(t.a).in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE LCASE(table.a) IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE LCASE(table.a) IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where(lcase(t.a).notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE LCASE(table.a) NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE LCASE(table.a) NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where("plum".in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE 'plum' IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 'plum' IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where("plum".notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE 'plum' NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 'plum' NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where(t.a.in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE table.a IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where(t.a.notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE table.a NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE table.a NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where(7.in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE 7 IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 7 IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where(7.notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE 7 NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 7 NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where(Float(7.8).in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE 7.8 IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 7.8 IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where(Float(7.8).notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE 7.8 NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE 7.8 NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where((-0.9).in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE -0.9 IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE -0.9 IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where((-0.9).notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE -0.9 NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE -0.9 NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where(Parameter().in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE ?1 IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE ?1 IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where(Parameter().notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE ?1 NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE ?1 NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where(true.in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE true IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE true IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where(true.notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE true NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE true NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where(Date(timeIntervalSince1970: 0).in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE '1970-01-01 00:00:00 +0000' IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE '1970-01-01 00:00:00 +0000' IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .where(Date(timeIntervalSince1970: 0).notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table WHERE '1970-01-01 00:00:00 +0000' NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a WHERE '1970-01-01 00:00:00 +0000' NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having(min(t.a).in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING MIN(table.a) IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING MIN(table.a) IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having(min(t.a).notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING MIN(table.a) NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING MIN(table.a) NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having("plum".in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING 'plum' IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 'plum' IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having("plum".notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING 'plum' NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 'plum' NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having(t.a.in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING table.a IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having(t.a.notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING table.a NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING table.a NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having(7.in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING 7 IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 7 IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having(7.notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING 7 NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 7 NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having(Float(7.8).in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING 7.8 IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 7.8 IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having(Float(7.8).notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING 7.8 NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING 7.8 NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having((-0.9).in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING -0.9 IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING -0.9 IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having((-0.9).notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING -0.9 NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING -0.9 NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having(Parameter().in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING ?1 IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING ?1 IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having(Parameter().notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING ?1 NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING ?1 NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having(false.in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING false IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING false IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having(false.notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING false NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING false NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having(Date(timeIntervalSince1970: 0).in(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING '1970-01-01 00:00:00 +0000' IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING '1970-01-01 00:00:00 +0000' IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")

    s = Select(t.a, from: t)
        .group(by: t.a)
        .having(Date(timeIntervalSince1970: 0).notIn(Select(t2.c, from: t2)))
    kuery = connection.descriptionOf(query: s)
    queryWhere = "SELECT table.a FROM table HAVING '1970-01-01 00:00:00 +0000' NOT IN (SELECT table2.c FROM table2) GROUP BY table.a"
    queryHaving = "SELECT table.a FROM table GROUP BY table.a HAVING '1970-01-01 00:00:00 +0000' NOT IN (SELECT table2.c FROM table2)"
    XCTAssert(kuery == queryWhere || kuery == queryHaving,
                    "\nError in query construction: \n\(kuery) \ninstead of \n\(queryWhere) \nor instead of \n\(queryHaving)")
  }
}
